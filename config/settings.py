"""
Django settings for project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import atexit
import os
import shutil
import stat
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler
from pathlib import Path

import environ
from django.contrib.messages.middleware import MessageMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from django.core.cache.backends.redis import RedisCache
from django.middleware.clickjacking import XFrameOptionsMiddleware
from django.middleware.common import CommonMiddleware
from django.middleware.csrf import CsrfViewMiddleware
from django.middleware.security import SecurityMiddleware

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ PATH SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

BASE_DIR = Path(__file__).resolve().parent.parent

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ CORE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

ROOT_URLCONF = 'config.urls'
WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ APPLICATION DEF ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

INSTALLED_APPS = [
    # Django Core Apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'channels',
    'django_extensions',
    'rest_framework',

    # Project Apps
    'apps.admin.apps.AdminConfig',
    'apps.auth.apps.AuthConfig',
    'apps.index.apps.IndexConfig',
    'apps.profile.apps.ProfileConfig',
    'apps.client.apps.ClientConfig',
    'apps.player.apps.PlayerConfig',
    'apps.game.apps.GameConfig',
    'apps.error.apps.ErrorConfig',
    'apps.chat.apps.ChatConfig',
    'apps.tournaments.apps.TournamentsConfig',
    'apps.notifications.apps.NotificationConfig'
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ MIDDLEWARE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'utils.jwt.JWTMiddleware.JWTMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ TEMPLATES ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REST FRAMEWORK ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'utils.jwt.JWTAuthtication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SECURITY SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

ALLOWED_HOSTS = ['localhost', '127.0.0.1']
CSRF_TRUSTED_ORIGINS = ['https://localhost:8000', 'https://127.0.0.1:8000']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Protected paths configuration
PROTECTED_PATHS = [
    '/pages/*',
    '/api/*'
]
EXCLUDED_PATHS = [
    '/api/auth/login',
    '/api/auth/register',
    '/pages/auth/login',
    '/pages/auth/register',
    '/pages/auth/2fa',
    '/pages/error/404',
    '/pages/auth/auth42',
]
ROLE_PROTECTED_PATHS = {
    '/pages/profile/settings': ['client'],
    '/pages/admin/*': ['admin']
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ JWT SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
JWT_EXP_ACCESS_TOKEN = os.environ.get('JWT_EXP_ACCESS_TOKEN', default=10)  # 30 minutes
JWT_EXP_REFRESH_TOKEN = os.environ.get('JWT_EXP_REFRESH_TOKEN', default=30)  # 30 days
JWT_ALGORITH = 'HS256'
JWT_ISS = 'https://localhost:8000'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ DATABASE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USERNAME'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REDIS SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REDIS_HOST = os.environ.get('REDIS_HOST', default='redis')
REDIS_PORT = os.environ.get('REDIS_PORT', default='6380')

REDIS_CONNECTIONS = {
    'default': {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': 0,
        'password': None,
        'socket_timeout': 5,
        'socket_connect_timeout': 5,
        'retry_on_timeout': True,
        'decode_responses': True,
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 1500,
            "expiry": 10,
            "group_expiry": 86400,
            "prefix": "channels",
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ INTERNATIONALIZATION ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_TZ = True
USE_I18N = True
USE_L10N = True

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ STATIC & MEDIA ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

STATIC_URL = 'static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ADMIN SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')
ADMIN_PWD = os.environ.get('ADMIN_PWD')
ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME')
GRFANA_ADMIN_PWD = os.environ.get('GRAFANA_PASSWORD')


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ LOGGING SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

class PermissionedRotatingFileHandler(RotatingFileHandler):
    def _open(self):
        rtv = super(PermissionedRotatingFileHandler, self)._open()
        os.chmod(self.baseFilename, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
        return rtv


LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILENAME = datetime.now().strftime('django_%Y%m%d_%H%M%S.log')
LATEST_LOG_FILENAME = 'latest.log'
MAX_LOG_SIZE = 5 * 1024 * 1024  # 5MB

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s.%(msecs)03d [%(thread)s %(threadName)s] %(levelname)s %(name)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, LOG_FILENAME),
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'maxBytes': MAX_LOG_SIZE,
            'backupCount': 4,
        },
        'latest_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, LATEST_LOG_FILENAME),
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'mode': 'w',
        },
        'redis_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'redis.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'websocket': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'websocket.protocol': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'websocket.client': {
            'handlers': ['file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'apps.game': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'utils.redis': {
            'handlers': ['console', 'redis_file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'channels': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'channels_redis': {
            'handlers': ['console', 'redis_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Apply permissions to latest.log file if it exists
latest_log_path = os.path.join(LOG_DIR, LATEST_LOG_FILENAME)
if os.path.exists(latest_log_path):
    os.chmod(latest_log_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
