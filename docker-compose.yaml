services:
  db:
    # build: ./postgres
    image: postgres
    # volumes:
      # - ./postgres_data:/var/lib/postgresql/data/
      # - ./postgres/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - Tnetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dockerdjango"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      # - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=${DATABASE_NAME}
    restart: always
  
  django-web:
    depends_on:
      db:
        condition: service_healthy 
    expose:
      - 8000
    build: .
    volumes:
      - ./staticdocker:/app/staticfiles
    env_file:
      - .env
    restart: always
    networks:
      - Tnetwork

  nginx:
    # image: nginx
    ports: 
      - "8001:443" #"HOST_PORT:CONTAINER_PORT" should not be inferior to 1024 when no sudo rights
    depends_on:
      - django-web
    build: ./nginx
    env_file: .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticdocker:/static:ro
    networks:
      - Tnetwork
    restart: always

  prometheus:
    image: prom/prometheus
    depends_on:
      - django-web
    volumes:
      - "./prometheus/volume/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - Tnetwork
    ports:
      - 9090:9090

  node-exporter:
    image: prom/node-exporter
    depends_on:
      - django-web
    networks:
      - Tnetwork
    ports:
      - 9101:9100
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH.BASIC_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./volumes/grafana/provisioning:/etc/grafana/provisioning
      # - grafana_storage:/var/lib/grafana
    networks:
      - Tnetwork

networks:
  Tnetwork:
    driver: bridge

# volumes:  
#   grafana_storage:
#     driver: local
#     driver_opts:
#       type: none
#       o: bind
#       device: ./volumes/grafana

# volumes:
#   postgres_data: