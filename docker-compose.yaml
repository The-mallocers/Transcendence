services:
  db:
    image: postgres
    container_name: postgresql
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - Tnetwork
    #    healthcheck:
    #      test: [ "CMD-SHELL", "pg_isready -U postgres -d dockerdjango" ]
    #      interval: 5s
    #      timeout: 5s
    #      retries: 5
    restart: always
  
  django-web:
    container_name: django
    depends_on:
      db:
        condition: service_healthy
    expose:
      - 8000
    build: ./docker/django
    volumes:
      - ./docker/staticdocker:/app/staticfiles
      - ./:/app/
    env_file:
      - .env
    networks:
      - Tnetwork
    environment:
      REDIS_HOST: 'redis'
      REDIS_POST: '6380'
    restart: always

  nginx:
    ports:
      - "8000:443"
      # -  "8080:80"
    depends_on:
      - django-web
    container_name: nginx
    build: ./docker/nginx
    env_file: .env
    volumes:
      - ./docker/staticdocker:/static:ro
      - ./docker/secrets:/etc/nginx/certs:ro
    networks:
      - Tnetwork
    restart: always

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    command: redis-stack-server --port 6380
    ports:
      - "6380:6380"
    networks:
      - Tnetwork
    restart: unless-stopped
    stop_grace_period: 1s

  # module grafana and prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - django-web
    volumes:
      - "./docker/prometheus/volume:/etc/prometheus"
      - "prometheus-data:/prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - Tnetwork
    ports:
      - 9090:9090
    restart: always

  node-exporter:
    image: prom/node-exporter
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - Tnetwork
    ports:
      - 9101:9100
    restart: unless-stopped

  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgresql-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}/${DATABASE_NAME}?sslmode=disable"
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    networks:
      - Tnetwork

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - 1025:1025  # SMTP server
      - 8025:8025  # Web interface
    logging:
      driver: "none"
    networks:
      - Tnetwork
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.23.0
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - "9093:9093"
    volumes:
      - "./docker/alertmanager:/config"
    command: --config.file=/config/alertmanager.yml --log.level=debug
    logging:
      driver: "none"
    networks:
      - Tnetwork
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    depends_on:
      prometheus:
        condition: service_started
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_PUBLIC_DASHBOARD_ENABLED=true
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/volumes/provisioning:/etc/grafana/provisioning
    networks:
      - Tnetwork
    restart: unless-stopped

networks:
  Tnetwork:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  postgres-data:
    driver: local
  grafana-data:
    driver: local