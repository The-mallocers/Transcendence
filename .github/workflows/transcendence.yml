name: Transcendence Docker CI

on:
  push:
    branches: [ main, 135-feature-create-githubs-actions ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Transcendence
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set lowercase repository owner
      run: |
        echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create pip cache directory
      run: mkdir -p ~/.cache/pip

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('docker/django/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Create Docker cache directory
      run: mkdir -p /tmp/.buildx-cache

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('docker-compose.yml') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and push Django image
    - name: Build and push Django image
      uses: docker/build-push-action@v4
      with:
        context: ./docker/django
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/django-web:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # Build and push Nginx image
    - name: Build and push Nginx image
      uses: docker/build-push-action@v4
      with:
        context: ./docker/nginx
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/nginx:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # Create temporary docker-compose-ghcr.yml file
    - name: Create docker-compose-ghcr.yml
      run: |
        cat > docker-compose-ghcr.yml << EOF
        services:
          db:
            image: postgres:latest
            container_name: postgresql
            volumes:
              - postgres-data:/var/lib/postgresql/data/
            ports:
              - "5432:5432"
            env_file:
              - .env
            networks:
              - Tnetwork
            environment:
              - POSTGRES_USER=\${DATABASE_USERNAME}
              - POSTGRES_PASSWORD=\${DATABASE_PASSWORD}
              - POSTGRES_DB=\${DATABASE_NAME}
            healthcheck:
              test: [ "CMD-SHELL", "pg_isready -U \${DATABASE_USERNAME} -d \${DATABASE_NAME} -h 127.0.0.1 -p \${DATABASE_PORT}" ]
              interval: 10s
              timeout: 5s
              retries: 10
              start_period: 20s
            restart: always

          django-web:
            container_name: django
            image: ${{ env.REGISTRY }}/${{ env.OWNER }}/django-web:latest
            depends_on:
              db:
                condition: service_healthy
            expose:
              - 8000
            volumes:
              - ./docker/staticdocker:/app/staticfiles
              - ./:/app/
            env_file:
              - .env
            networks:
              - Tnetwork
            environment:
              REDIS_HOST: 'redis'
              REDIS_POST: '6380'
            restart: always

          nginx:
            image: ${{ env.REGISTRY }}/${{ env.OWNER }}/nginx:latest
            ports:
              - "8000:443"
            depends_on:
              - django-web
            container_name: nginx
            env_file:
              - .env
            volumes:
              - ./docker/staticdocker:/static:ro
              - ./docker/secrets:/etc/nginx/certs:ro
            networks:
              - Tnetwork
            restart: always

          redis:
            image: redis/redis-stack:latest
            container_name: redis
            command: redis-stack-server --port 6380
            ports:
              - "6380:6380"
            networks:
              - Tnetwork
            restart: unless-stopped
            stop_grace_period: 1s

          # module grafana and prometheus
          prometheus:
            image: prom/prometheus
            container_name: prometheus
            depends_on:
              - django-web
            volumes:
              - "./docker/prometheus/volume:/etc/prometheus"
              - "prometheus-data:/prometheus"
            command:
              - '--config.file=/etc/prometheus/prometheus.yml'
              - '--storage.tsdb.retention.time=15d'
              - '--storage.tsdb.path=/prometheus'
            networks:
              - Tnetwork
            ports:
              - "9090:9090"
            restart: always

          node-exporter:
            image: prom/node-exporter
            depends_on:
              prometheus:
                condition: service_started
            networks:
              - Tnetwork
            ports:
              - "9101:9100"
            restart: unless-stopped

          postgresql-exporter:
            image: prometheuscommunity/postgres-exporter
            container_name: postgresql-exporter
            ports:
              - "9187:9187"
            environment:
              DATA_SOURCE_NAME: "postgres://\${DATABASE_USERNAME}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}/\${DATABASE_NAME}?sslmode=disable"
            depends_on:
              prometheus:
                condition: service_started
            restart: unless-stopped
            networks:
              - Tnetwork

          mailhog:
            image: mailhog/mailhog
            container_name: mailhog
            depends_on:
              prometheus:
                condition: service_started
            ports:
              - "1025:1025"  # SMTP server
              - "8025:8025"  # Web interface
            logging:
              driver: "none"
            networks:
              - Tnetwork
            restart: unless-stopped

          alertmanager:
            image: prom/alertmanager:v0.23.0
            depends_on:
              prometheus:
                condition: service_started
            ports:
              - "9093:9093"
            volumes:
              - "./docker/alertmanager:/config"
            command: --config.file=/config/alertmanager.yml --log.level=debug
            logging:
              driver: "none"
            networks:
              - Tnetwork
            restart: unless-stopped

          grafana:
            image: grafana/grafana-enterprise
            container_name: grafana
            depends_on:
              prometheus:
                condition: service_started
            env_file:
              - .env
            environment:
              - GF_SECURITY_ADMIN_PASSWORD=\${GRAFANA_PASSWORD}
              - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=false
              - GF_SECURITY_ALLOW_EMBEDDING=true
              - GF_PUBLIC_DASHBOARD_ENABLED=true
              - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
            ports:
              - "3000:3000"
            volumes:
              - grafana-data:/var/lib/grafana
              - ./docker/grafana/volumes/provisioning:/etc/grafana/provisioning
            networks:
              - Tnetwork
            restart: unless-stopped

        networks:
          Tnetwork:
            driver: bridge

        volumes:
          prometheus-data:
            driver: local
          postgres-data:
            driver: local
          grafana-data:
            driver: local
        EOF

    # Move cache to avoid cache growing in size indefinitely
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: Transcendence

    steps:
    - uses: actions/checkout@v3

    - name: Set lowercase repository owner
      run: |
        echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Write environment variables to .env file
      run: |
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "SECRET_FA_KEY=${{ secrets.SECRET_FA_KEY }}" >> .env
        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo "GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}" >> .env
        echo "ADMIN_PWD=${{ secrets.ADMIN_PWD }}" >> .env
        echo "DATABASE_NAME=${{ vars.DATABASE_NAME }}" >> .env
        echo "DATABASE_USERNAME=${{ vars.DATABASE_USERNAME }}" >> .env
        echo "DATABASE_HOST=${{ vars.DATABASE_HOST }}" >> .env
        echo "DATABASE_PORT=${{ vars.DATABASE_PORT }}" >> .env
        echo "JWT_EXP_ACCESS_TOKEN=${{ vars.JWT_EXP_ACCESS_TOKEN }}" >> .env
        echo "JWT_EXP_REFRESH_TOKEN=${{ vars.JWT_EXP_REFRESH_TOKEN }}" >> .env
        echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
        echo "ADMIN_EMAIL=${{ vars.ADMIN_EMAIL }}" >> .env
        echo "ADMIN_USERNAME=${{ vars.ADMIN_USERNAME }}" >> .env

    - name: Start Docker Compose services with GHCR images
      run: docker-compose -f docker-compose-ghcr.yml up -d

    - name: Wait for Django to be ready
      run: |
        until [ "$(curl -k -s -o /dev/null -w '%{http_code}' https://localhost:8000/)" -eq 200 ]; do
          echo "Waiting for Django to start..."
          sleep 5
        done
        echo "Django is ready!"

    - name: Run Django tests
      run: docker-compose -f docker-compose-ghcr.yml exec -T django-web python manage.py test

    - name: Stop containers
      if: always()
      run: docker-compose -f docker-compose-ghcr.yml down