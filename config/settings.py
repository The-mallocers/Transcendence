"""
Django settings for project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import atexit
import logging
import logging.config
import os
import shutil
import stat
import sys
import time
from datetime import datetime
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from pathlib import Path

import colorlog
import environ
from django.contrib.messages.middleware import MessageMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from django.core.cache.backends.redis import RedisCache
from django.middleware.clickjacking import XFrameOptionsMiddleware
from django.middleware.common import CommonMiddleware
from django.middleware.csrf import CsrfViewMiddleware
from django.middleware.security import SecurityMiddleware

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ PATH SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

BASE_DIR = Path(__file__).resolve().parent.parent

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ CORE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

ROOT_URLCONF = 'config.urls'
WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ APPLICATION DEF ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

INSTALLED_APPS = [
    # Django Core Apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'channels',
    'django_extensions',
    'rest_framework',

    # Project Apps
    'apps.admin.apps.AdminConfig',
    'apps.auth.apps.AuthConfig',
    'apps.index.apps.IndexConfig',
    'apps.profile.apps.ProfileConfig',
    'apps.client.apps.ClientConfig',
    'apps.player.apps.PlayerConfig',
    'apps.game.apps.GameConfig',
    'apps.error.apps.ErrorConfig',
    'apps.chat.apps.ChatConfig',
    'apps.tournaments.apps.TournamentsConfig',
    'apps.notifications.apps.NotificationConfig'
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ MIDDLEWARE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'utils.jwt.JWTMiddleware.JWTMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ TEMPLATES ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REST FRAMEWORK ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'utils.jwt.JWTAuthtication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SECURITY SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'z1r2p4']
CSRF_TRUSTED_ORIGINS = ['https://localhost:8000', 'https://127.0.0.1:8000']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Protected paths configuration
PROTECTED_PATHS = [
    '/pages/*',
    '/api/*'
]
EXCLUDED_PATHS = [
    '/api/auth/login',
    '/api/auth/register',
    '/api/auth/2facode',
    '/pages/auth/login',
    '/pages/auth/register',
    '/pages/auth/2fa',
    '/pages/error/404',
    '/pages/auth/auth42',
]
ROLE_PROTECTED_PATHS = {
    '/pages/profile/settings': ['client'],
    '/pages/admin/*': ['admin']
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ JWT SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
JWT_EXP_ACCESS_TOKEN = os.environ.get('JWT_EXP_ACCESS_TOKEN', default=10)  # 30 minutes
JWT_EXP_REFRESH_TOKEN = os.environ.get('JWT_EXP_REFRESH_TOKEN', default=30)  # 30 days
JWT_ALGORITH = 'HS256'
JWT_ISS = 'https://localhost:8000'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ DATABASE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USERNAME'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REDIS SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REDIS_HOST = os.environ.get('REDIS_HOST', default='redis')
REDIS_PORT = os.environ.get('REDIS_PORT', default='6380')

REDIS_CONNECTIONS = {
    'default': {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': 0,
        'password': None,
        'socket_timeout': 5,
        'socket_connect_timeout': 5,
        'retry_on_timeout': True,
        'decode_responses': True,
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 1500,
            "expiry": 10,
            "group_expiry": 86400,
            "prefix": "channels",
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ INTERNATIONALIZATION ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_TZ = True
USE_I18N = True
USE_L10N = True

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ STATIC & MEDIA ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

STATIC_URL = 'static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ADMIN SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')
ADMIN_PWD = os.environ.get('ADMIN_PWD')
ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME')
GRFANA_ADMIN_PWD = os.environ.get('GRAFANA_PASSWORD')


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ LOGGING SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

# Import custom logging handlers
from utils.logger import PermissionedRotatingFileHandler, PermissionedTimedRotatingFileHandler


# Log directory and file configuration
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# Create subdirectories for different log types
ERROR_LOG_DIR = os.path.join(LOG_DIR, 'errors')
ACCESS_LOG_DIR = os.path.join(LOG_DIR, 'access')
SECURITY_LOG_DIR = os.path.join(LOG_DIR, 'security')
PERFORMANCE_LOG_DIR = os.path.join(LOG_DIR, 'performance')

for directory in [ERROR_LOG_DIR, ACCESS_LOG_DIR, SECURITY_LOG_DIR, PERFORMANCE_LOG_DIR]:
    os.makedirs(directory, exist_ok=True)

# Log file names and rotation settings
# Use a fixed name for the main log file to prevent multiple files being created
LOG_FILENAME = 'django.log'
ERROR_LOG_FILENAME = 'error.log'
ACCESS_LOG_FILENAME = 'access.log'
SECURITY_LOG_FILENAME = 'security.log'
PERFORMANCE_LOG_FILENAME = 'performance.log'
LATEST_LOG_FILENAME = 'latest.log'

# Log rotation settings
MAX_LOG_SIZE = 10 * 1024 * 1024  # 10MB
MAX_LOG_FILES = 5  # Maximum number of log files to keep
LOG_ROTATION_WHEN = 'midnight'  # Rotate logs at midnight
LOG_ROTATION_INTERVAL = 1  # Rotate every day
LOG_ROTATION_BACKUP_COUNT = 60  # Keep logs for 60 days

# Define log levels based on environment
LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'
CONSOLE_LOG_LEVEL = 'DEBUG' if DEBUG else 'WARNING'

# Column widths for aligned logging
LEVEL_WIDTH = 8
THREAD_WIDTH = 17
NAME_WIDTH = 20

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'ignore_static_requests': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: 'static' not in record.getMessage(),
        },
    },
    'formatters': {
        'aligned': {
            'format': f'%(asctime)s.%(msecs)03d | %(levelname)-{LEVEL_WIDTH}s | %(threadName)-{THREAD_WIDTH}s | %(name)-{NAME_WIDTH}s | %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'colored': {
            '()': 'colorlog.ColoredFormatter',
            'format': f'%(log_color)s%(asctime)s.%(msecs)03d | %(levelname)-{LEVEL_WIDTH}s | %(threadName)-{THREAD_WIDTH}s | %(name)-{NAME_WIDTH}s | %(message)s%(reset)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'log_colors': {
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white',
            },
        },
        'simple': {
            'format': '%(asctime)s | %(levelname)s | %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'json': {
            'format': '{"timestamp": "%(asctime)s.%(msecs)03d", "level": "%(levelname)s", "thread": "%(threadName)s", "name": "%(name)s", "message": "%(message)s", "pathname": "%(pathname)s", "lineno": %(lineno)d}',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        # Main log file handler
        'file': {
            'level': 'INFO',
            'class': 'utils.logger.PermissionedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, LOG_FILENAME),
            'formatter': 'aligned',
            'encoding': 'utf-8',
            'maxBytes': MAX_LOG_SIZE,
            'backupCount': MAX_LOG_FILES,
        },
        # Latest log file handler (overwrites on restart)
        'latest_file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, LATEST_LOG_FILENAME),
            'formatter': 'aligned',
            'encoding': 'utf-8',
            'mode': 'w',
        },
        # Console handler with color formatting
        'console': {
            'level': CONSOLE_LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
        },
        # Error log handler
        'error_file': {
            'level': 'ERROR',
            'class': 'utils.logger.PermissionedTimedRotatingFileHandler',
            'filename': os.path.join(ERROR_LOG_DIR, ERROR_LOG_FILENAME),
            'formatter': 'aligned',
            'encoding': 'utf-8',
            'when': LOG_ROTATION_WHEN,
            'interval': LOG_ROTATION_INTERVAL,
            'backupCount': LOG_ROTATION_BACKUP_COUNT,
        },
        # Access log handler
        'access_file': {
            'level': 'INFO',
            'class': 'utils.logger.PermissionedTimedRotatingFileHandler',
            'filename': os.path.join(ACCESS_LOG_DIR, ACCESS_LOG_FILENAME),
            'formatter': 'aligned',
            'encoding': 'utf-8',
            'when': LOG_ROTATION_WHEN,
            'interval': LOG_ROTATION_INTERVAL,
            'backupCount': LOG_ROTATION_BACKUP_COUNT,
            'filters': ['ignore_static_requests'],
        },
        # Security log handler
        'security_file': {
            'level': 'INFO',
            'class': 'utils.logger.PermissionedTimedRotatingFileHandler',
            'filename': os.path.join(SECURITY_LOG_DIR, SECURITY_LOG_FILENAME),
            'formatter': 'json',  # Use JSON format for security logs for better analysis
            'encoding': 'utf-8',
            'when': LOG_ROTATION_WHEN,
            'interval': LOG_ROTATION_INTERVAL,
            'backupCount': LOG_ROTATION_BACKUP_COUNT,
        },
        # Performance log handler
        'performance_file': {
            'level': 'DEBUG',
            'class': 'utils.logger.PermissionedRotatingFileHandler',
            'filename': os.path.join(PERFORMANCE_LOG_DIR, PERFORMANCE_LOG_FILENAME),
            'formatter': 'aligned',
            'encoding': 'utf-8',
            'maxBytes': MAX_LOG_SIZE,
            'backupCount': MAX_LOG_FILES,
        },
        # Mail admins on error (production only)
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        # Root logger - handles all logging
        '': {
            'handlers': ['console', 'file', 'latest_file', 'error_file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        # Django request logger
        'django.request': {
            'handlers': ['access_file', 'error_file', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django security logger
        'django.security': {
            'handlers': ['security_file', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django server logger
        'django.server': {
            'handlers': ['access_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Database queries logger (debug only)
        'django.db.backends': {
            'handlers': ['performance_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        # Django management commands logger (collectstatic, migrate, etc.)
        'django.core.management': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.core.management.commands': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Static files logger
        'django.contrib.staticfiles': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Migrations logger
        'django.db.migrations': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Custom application loggers
        'apps': {
            'handlers': ['console', 'file', 'error_file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'utils': {
            'handlers': ['console', 'file', 'error_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        # Daphne server logger
        'daphne': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'daphne.cli': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Uvicorn loggers
        'uvicorn': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.error': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.access': {
            'handlers': ['access_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.main': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.config': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # WatchFiles loggers (used by Uvicorn hot reload)
        'watchfiles': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'watchfiles.main': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'watchfiles.watcher': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Uvicorn reload supervisor logger
        'uvicorn.supervisors': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.supervisors.reload': {
            'handlers': ['console', 'file', 'latest_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# Apply permissions to log files if they exist
def apply_log_permissions(log_path):
    """Apply read/write permissions to log files."""
    if os.path.exists(log_path):
        os.chmod(log_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)


# Apply permissions to main log files
log_files = [
    os.path.join(LOG_DIR, LATEST_LOG_FILENAME),
    os.path.join(LOG_DIR, LOG_FILENAME),
    os.path.join(ERROR_LOG_DIR, ERROR_LOG_FILENAME),
    os.path.join(ACCESS_LOG_DIR, ACCESS_LOG_FILENAME),
    os.path.join(SECURITY_LOG_DIR, SECURITY_LOG_FILENAME),
    os.path.join(PERFORMANCE_LOG_DIR, PERFORMANCE_LOG_FILENAME),
]

for log_file in log_files:
    apply_log_permissions(log_file)


# Register a function to clean up old log files on application exit
def cleanup_old_logs():
    """Clean up old log files to prevent disk space issues."""
    try:
        # Find and remove log files older than LOG_ROTATION_BACKUP_COUNT days
        import time
        from datetime import timedelta

        cutoff_time = time.time() - (LOG_ROTATION_BACKUP_COUNT * 24 * 60 * 60)

        for root, _, files in os.walk(LOG_DIR):
            for file in files:
                if file.endswith('.log') and not file == LATEST_LOG_FILENAME:
                    file_path = os.path.join(root, file)
                    if os.path.getmtime(file_path) < cutoff_time:
                        try:
                            os.remove(file_path)
                            print(f"Removed old log file: {file_path}")
                        except Exception as e:
                            raise Exception(f"Failed to remove old log file {file_path}: {e}")
    except Exception as e:
        raise Exception(f"Error during log cleanup: {e}")


# Register the cleanup function to run on application exit
atexit.register(cleanup_old_logs)

# Configure Uvicorn to use Django's logging
# This prevents Uvicorn from configuring its own logging
LOGGING_CONFIG = None
logging.config.dictConfig(LOGGING)
