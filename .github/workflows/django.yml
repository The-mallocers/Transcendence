name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat <<EOF > .env
          ENVIRONMENT='DEVELOPMENT'

          # Django settings
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}
          DJANGO_ALLOWED_HOST=${{ secrets.DJANGO_ALLOWED_HOST }}
          DJANGO_CSRF_TRUSTED_ORIGINS=${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }}

          # JWT Settings
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_EXP_ACCESS_TOKEN=${{ secrets.JWT_EXP_ACCESS_TOKEN }}
          JWT_EXP_REFRSH_TOKEN=${{ secrets.JWT_EXP_REFRSH_TOKEN }}
          SECRET_FA_KEY=${{ secrets.SECRET_FA_KEY }}

          # Profile model settings
          USERNAME_LENGHT=${{ secrets.USERNAME_LENGHT }}
          FIRSTNAME_LENGHT=${{ secrets.FIRSTNAME_LENGHT }}
          LASTNAME_LENGHT=${{ secrets.LASTNAME_LENGHT }}

          # Database settings
          DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}

          # Admin
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PWD=${{ secrets.ADMIN_PWD }}
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}

          # Grafana
          GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
          EOF

      - name: Start application using Makefile
        run: make up &> output.log &

      - name: Verify startup messages
        run: |
          echo "Waiting for application to start..."
          timeout=2400  # Set a max wait time of 60 seconds
          elapsed=0
          while ! (grep -q "Application startup complete" output.log && grep -q "Established new database connection" output.log); do
            sleep 2
            elapsed=$((elapsed + 2))
            echo "Waiting... ($elapsed seconds elapsed)"
            if [ "$elapsed" -ge "$timeout" ]; then
              echo "❌ Timeout reached. Application failed to start."
              cat output.log  # Show logs for debugging
              exit 1
            fi
          done
          echo "✅ Application and database started successfully!"
