"""
Django settings for project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import atexit
import json
import logging
import logging.config
import os
import shutil
import signal
import socket
import stat
import sys
import time
from datetime import datetime
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from pathlib import Path

import colorlog
import environ
from django.contrib.messages.middleware import MessageMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from django.core.cache.backends.redis import RedisCache
from django.middleware.clickjacking import XFrameOptionsMiddleware
from django.middleware.common import CommonMiddleware
from django.middleware.csrf import CsrfViewMiddleware
from django.middleware.security import SecurityMiddleware

from utils.redis import RedisConnectionPool
from utils.threads.threads import Threads

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ PATH SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

BASE_DIR = Path(__file__).resolve().parent.parent

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ CORE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

ROOT_URLCONF = 'config.urls'
WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ APPLICATION DEF ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

INSTALLED_APPS = [
    # Django Core Apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'channels',
    'django_extensions',
    'rest_framework',

    # Project Apps
    'apps.admin.apps.AdminConfig',
    'apps.auth.apps.AuthConfig',
    'apps.index.apps.IndexConfig',
    'apps.profile.apps.ProfileConfig',
    'apps.client.apps.ClientConfig',
    'apps.player.apps.PlayerConfig',
    'apps.game.apps.GameConfig',
    'apps.error.apps.ErrorConfig',
    'apps.chat.apps.ChatConfig',
    'apps.tournaments.apps.TournamentsConfig',
    'apps.notifications.apps.NotificationConfig'
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ MIDDLEWARE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'utils.jwt.JWTMiddleware.JWTMiddleware',
    # 'utils.session.SessionLimitingMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ TEMPLATES ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REST FRAMEWORK ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'utils.jwt.JWTAuthtication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SECURITY SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

HOSTNAME = socket.gethostname()
ALLOWED_HOSTS = ['*']
IPWARE_TRUSTED_PROXIES = ['127.0.0.1', '::1', 'django', 'nginx']
CSRF_TRUSTED_ORIGINS = [f'https://{HOSTNAME}', 'https://localhost:8000', 'https://127.0.0.1:8000']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# Protected paths configuration
PROTECTED_PATHS = [
    '/pages/*',
    '/api/*'
]
EXCLUDED_PATHS = [
    '/api/auth/login',
    '/api/auth/register',
    '/api/auth/2facode',
    '/pages/auth/login',
    '/pages/auth/register',
    '/pages/auth/2fa',
    '/pages/error/404',
    '/pages/auth/auth42',
]
ROLE_PROTECTED_PATHS = {
    '/pages/profile/settings': ['client'],
    '/pages/admin/*': ['admin']
}

# ────────────────────────────────── Session Limiting ────────────────────────────────── #

SESSION_LIMITING_EXPIRY = 1800
SESSION_LIMITING_BLOCK_NEW = True
SESSION_LIMITING_EXEMPT_ADMIN = True
SESSION_LIMITING_EXEMPT_PATHS = [
    '/pages/',
    '/api/',
    '/static/',
    '/media/'
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ JWT SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
JWT_EXP_ACCESS_TOKEN = os.environ.get('JWT_EXP_ACCESS_TOKEN', default=10)  # 30 minutes
JWT_EXP_REFRESH_TOKEN = os.environ.get('JWT_EXP_REFRESH_TOKEN', default=30)  # 30 days
JWT_ALGORITH = 'HS256'
JWT_ISS = f'https://{HOSTNAME}'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ DATABASE SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USERNAME'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ REDIS SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

REDIS_HOST = os.environ.get('REDIS_HOST', default='redis')
REDIS_PORT = os.environ.get('REDIS_PORT', default='6380')

REDIS_CONNECTIONS = {
    'default': {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': 0,
        'password': None,
        'socket_timeout': 5,
        'socket_connect_timeout': 5,
        'retry_on_timeout': True,
        'decode_responses': True,
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 1500,
            "expiry": 10,
            "group_expiry": 86400,
            "prefix": "channels",
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ INTERNATIONALIZATION ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_TZ = True
USE_I18N = True
USE_L10N = True

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ STATIC & MEDIA ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

STATIC_URL = 'static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ADMIN SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')
ADMIN_PWD = os.environ.get('ADMIN_PWD')
ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME')
GRAFANA_ADMIN_PWD = os.environ.get('GRAFANA_PASSWORD')


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ LOGGING SETTINGS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

# Log directory and file configuration
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# Create subdirectories for different log types
ERROR_LOG_DIR = os.path.join(LOG_DIR, 'errors')
ACCESS_LOG_DIR = os.path.join(LOG_DIR, 'access')
SECURITY_LOG_DIR = os.path.join(LOG_DIR, 'security')
PERFORMANCE_LOG_DIR = os.path.join(LOG_DIR, 'performance')

for directory in [ERROR_LOG_DIR, ACCESS_LOG_DIR, SECURITY_LOG_DIR, PERFORMANCE_LOG_DIR]:
    os.makedirs(directory, exist_ok=True)

# Log file names for permission setting
LATEST_LOG_FILENAME = 'latest.log'
LOG_FILENAME = 'django.log'
ERROR_LOG_FILENAME = 'error.log'
ACCESS_LOG_FILENAME = 'access.log'
SECURITY_LOG_FILENAME = 'security.log'
PERFORMANCE_LOG_FILENAME = 'performance.log'

# Log rotation settings for cleanup
LOG_ROTATION_BACKUP_COUNT = 60  # Keep logs for 60 days

# Apply permissions to log files if they exist
def apply_log_permissions(log_path):
    """Apply read/write permissions to log files."""
    if os.path.exists(log_path):
        os.chmod(log_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)

# Apply permissions to main log files
log_files = [
    os.path.join(LOG_DIR, LATEST_LOG_FILENAME),
    os.path.join(LOG_DIR, LOG_FILENAME),
    os.path.join(ERROR_LOG_DIR, ERROR_LOG_FILENAME),
    os.path.join(ACCESS_LOG_DIR, ACCESS_LOG_FILENAME),
    os.path.join(SECURITY_LOG_DIR, SECURITY_LOG_FILENAME),
    os.path.join(PERFORMANCE_LOG_DIR, PERFORMANCE_LOG_FILENAME),
]

for log_file in log_files:
    apply_log_permissions(log_file)

# Register a function to clean up old log files on application exit
def cleanup_old_logs():
    try:
        cutoff_time = time.time() - (LOG_ROTATION_BACKUP_COUNT * 24 * 60 * 60)

        for root, _, files in os.walk(LOG_DIR):
            for file in files:
                if file.endswith('.log') and not file == LATEST_LOG_FILENAME:
                    file_path = os.path.join(root, file)
                    if os.path.getmtime(file_path) < cutoff_time:
                        try:
                            os.remove(file_path)
                        except Exception as e:
                            raise Exception(f"Failed to remove old log file {file_path}: {e}")
    except Exception as e:
        raise Exception(f"Error during log cleanup: {e}")


def clean_threads(signum, frame):
    Threads.stop_all_threads()
    signal.default_int_handler(signum, frame)

def clean_redis(sigum, frame):
    redis = RedisConnectionPool.get_sync_connection('default')
    redis.flushall()
    RedisConnectionPool.close_all_connections()
    signal.default_int_handler(sigum, frame)

# Register the cleanup function to run on application exit
signal.signal(signal.SIGTERM, cleanup_old_logs)
signal.signal(signal.SIGTERM, clean_threads)
signal.signal(signal.SIGTERM, clean_redis)

# Load logging configuration from JSON file
with open(os.path.join(BASE_DIR, 'config', 'logging.json'), 'r') as f:
    LOGGING = json.load(f)

# Configure Django's logging
LOGGING_CONFIG = None
logging.config.dictConfig(LOGGING)
