name: Django CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker layer caching
        uses: actions/cache@v3
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Create .env file
        run: |
          cat <<EOF > .env
          ENVIRONMENT='DEVELOPMENT'
          
          # Django settings
          DJANGO_SECRET_KEY="django-insecure-default-for-ci-testing"
          DJANGO_DEBUG="True"
          DJANGO_ALLOWED_HOST="*"
          DJANGO_CSRF_TRUSTED_ORIGINS="http://localhost:8001"
          
          # Database settings
          DATABASE_ENGINE="django.db.backends.postgresql"
          DATABASE_NAME="dockerdjango"
          DATABASE_USERNAME="postgres"
          DATABASE_PASSWORD="postgres"
          DATABASE_HOST="postgresql"
          DATABASE_PORT="5432"
          
          # Admin
          ADMIN_EMAIL="admin@transcendance.fr"
          ADMIN_PWD="admin"
          ADMIN_USERNAME="admin"
          
          # Other settings with reasonable defaults
          JWT_SECRET_KEY="jwt-secret-for-testing"
          JWT_EXP_ACCESS_TOKEN="3600"
          JWT_EXP_REFRSH_TOKEN="86400"
          SECRET_FA_KEY="fa-secret-for-testing"
          USERNAME_LENGHT="32"
          FIRSTNAME_LENGHT="32"
          LASTNAME_LENGHT="32"
          GRAFANA_PASSWORD="admin"
          EOF

      - name: Start application using Makefile
        run: make up &> output.log &

      - name: Verify startup messages
        run: |
          echo "Waiting for application to start..."
          timeout=2400  # Set a max wait time
          elapsed=0
          while ! (grep -q "Application startup complete" output.log && grep -q "Established new database connection" output.log); do
            sleep 2
            elapsed=$((elapsed + 2))
            echo "Waiting... ($elapsed seconds elapsed)"
            if [ "$elapsed" -ge "$timeout" ]; then
              echo "❌ Timeout reached. Application failed to start."
              cat output.log  # Show logs for debugging
              exit 1
            fi
          done
          echo "✅ Application and database started successfully!"
